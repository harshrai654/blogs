<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Mutex on Learning Loop</title><link>https://harshrai654.github.io/blogs/tags/mutex/</link><description>Recent content in Mutex on Learning Loop</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Sun, 17 Nov 2024 12:08:00 +0530</lastBuildDate><atom:link href="https://harshrai654.github.io/blogs/tags/mutex/index.xml" rel="self" type="application/rss+xml"/><item><title>B-Tree Latch Optimisation</title><link>https://harshrai654.github.io/blogs/b-tree-latch-optimisation/</link><pubDate>Sun, 17 Nov 2024 12:08:00 +0530</pubDate><guid>https://harshrai654.github.io/blogs/b-tree-latch-optimisation/</guid><description>&lt;h1 id="references">References&lt;/h1>
&lt;h2 id="56-problem">5.6 Problem&lt;/h2>
&lt;p>Generally when traversing the index made up of btree we have to take latch on it. In MySQL 5.6 the approach of taking latch depends on the possible operation we are doing:&lt;/p>
&lt;ul>
&lt;li>If the operation is a read operation then taking a read lock is sufficient to prevent any writes to happen to the pages we are accessing in Btree while reading&lt;/li>
&lt;li>If the operation is a write operation then there are again two possibilities:
&lt;ul>
&lt;li>
&lt;h3 id="optimistic-locking">Optimistic Locking&lt;/h3>
If the write is limited to modifying the leaf page only without modifying the structure of the tree (Merging OR Splitting) then it&amp;rsquo;s an optimistic locking approach where we take read latch on root of the tree and write latch only on the leaf node to modify
&lt;img alt="Pasted image 20241117123300.png" loading="lazy" src="https://harshrai654.github.io/blogs/media/pasted-image-20241117123300.png"> ^ab3c53&lt;/li>
&lt;li>
&lt;h3 id="pessimistic-locking">Pessimistic Locking&lt;/h3>
But if the operation result is in any type of restructuring of the tree itself then that will be known to us only after reaching the target leaf node and knowing its neighbours and parents. So the approach is first to try with optimistic locking defined above and then go for pessimistic locking
&lt;img alt="Pasted image 20241117123407.png" loading="lazy" src="https://harshrai654.github.io/blogs/media/pasted-image-20241117123407.png">
&lt;blockquote>
&lt;p>&lt;strong>Pessimistic locking&lt;/strong> involves taking a write latch on the root resulting in full ownership of the tree by the current operation (until the operation is complete no other operation can take a read or write latch, so all the other operations has to wait even if they are read operations and involve only optimistic locking). When the leaf node is found we take write latch on the leaf&amp;rsquo;s neighbours as well as its parent and do the restructuring and if the same restructuring needs to happen at parent level then we will take similar write locks recursively up the tree. ^17a3ff&lt;/p></description></item></channel></rss>