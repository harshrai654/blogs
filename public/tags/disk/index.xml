<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Disk on Learning Loop</title><link>https://harshrai654.github.io/blogs/tags/disk/</link><description>Recent content in Disk on Learning Loop</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Sat, 01 Mar 2025 20:41:00 +0000</lastBuildDate><atom:link href="https://harshrai654.github.io/blogs/tags/disk/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Inodes and Disk Layout</title><link>https://harshrai654.github.io/blogs/file-system-implementation/</link><pubDate>Sat, 01 Mar 2025 20:41:00 +0000</pubDate><guid>https://harshrai654.github.io/blogs/file-system-implementation/</guid><description>&lt;h2 id="overall-organization-of-data-in-disks">Overall Organization Of Data In Disks&lt;/h2>
&lt;p>&lt;em>Assuming we have a 256KB disk&lt;/em>.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Disk Blocks&lt;/strong>: The basic units of storage on the disk, &lt;em>each 4 KB in size.&lt;/em> The disk is divided into these blocks, numbered from 0 to N-1 (where N is the total number of blocks).&lt;/li>
&lt;li>&lt;strong>Inode Bitmap (i)&lt;/strong>: Block 1; a bitmap tracking which inodes are free (0) or in-use (1).&lt;/li>
&lt;li>&lt;strong>Data Bitmap (d)&lt;/strong>: Block 2; a bitmap tracking which data blocks are free (0) or allocated (1).&lt;/li>
&lt;li>&lt;strong>Inode Table (I)&lt;/strong>: Blocks 3-7; an array of inodes, where each inode (256 bytes) holds metadata about a file, like size, permissions, and pointers to data blocks.
5 blocks of 4KB will contain 80 256 byte inode strutures.&lt;/li>
&lt;li>&lt;strong>Data Region (D)&lt;/strong>: Blocks 8-63; the largest section, storing the actual contents of files and directories.
&lt;img alt="Pasted image 20250301204506.png" loading="lazy" src="https://harshrai654.github.io/blogs/media/pasted-image-20250301204506.png">&lt;/li>
&lt;/ul>
&lt;h2 id="inode">Inode&lt;/h2>
&lt;p>Every inode has a unique identifier called an &lt;strong>inode number&lt;/strong> (or &lt;strong>i-number&lt;/strong>). This number acts like a file’s address in the file system, allowing the operating system to quickly locate its inode. For example:&lt;/p></description></item><item><title>Files And Directories</title><link>https://harshrai654.github.io/blogs/files-and-directories/</link><pubDate>Sun, 23 Feb 2025 20:41:00 +0000</pubDate><guid>https://harshrai654.github.io/blogs/files-and-directories/</guid><description>&lt;h1 id="files-and-directories">Files and directories&lt;/h1>
&lt;p>File systems virtualize persistent storage (e.g., hard drives, SSDs) into user-friendly files and directories, adding a third pillar to OS abstractions (processes for CPU, address spaces for memory).&lt;/p>
&lt;h2 id="file-paths-and-system-calls">File Paths and System Calls&lt;/h2>
&lt;p>Files are organized in a &lt;strong>tree-like directory structure&lt;/strong>, starting from the root (/). A file’s location is identified by its &lt;strong>pathname&lt;/strong> (e.g., /home/user/file.txt). To interact with files, processes use &lt;strong>system calls&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>open(path, flags)&lt;/strong>: Opens a file and returns a &lt;strong>file descriptor&lt;/strong> (fd).&lt;/li>
&lt;li>&lt;strong>read(fd, buffer, size)&lt;/strong>: Reads data from the file into a buffer using the fd.&lt;/li>
&lt;li>&lt;strong>write(fd, buffer, size)&lt;/strong>: Writes data to the file via the fd.&lt;/li>
&lt;li>&lt;strong>close(fd)&lt;/strong>: Closes the file, freeing the fd.&lt;/li>
&lt;/ul>
&lt;h2 id="file-descriptors">File Descriptors&lt;/h2>
&lt;p>A &lt;strong>file descriptor&lt;/strong> is a small integer, unique to each process, that identifies an open file. When a process calls open(), the operating system assigns it the next available fd (e.g., 3, 4, etc.). Every process starts with three default fds:&lt;/p></description></item><item><title>RAID (Redundant array of inexpensive disk)</title><link>https://harshrai654.github.io/blogs/raid-redundant-array-of-inexpensive-disk/</link><pubDate>Thu, 13 Feb 2025 20:25:14 +0530</pubDate><guid>https://harshrai654.github.io/blogs/raid-redundant-array-of-inexpensive-disk/</guid><description>&lt;h1 id="raid-disks">RAID Disks&lt;/h1>
&lt;p>Three axes on which disks are analysed&lt;/p>
&lt;ul>
&lt;li>Capacity - How much capacity is needed to store X bytes of data&lt;/li>
&lt;li>Reliability - How much fault-tolerant is the disk&lt;/li>
&lt;li>Performance - Read and write speeds (Sequential and random)&lt;/li>
&lt;/ul>
&lt;p>To make a logical disk (comprising set of physical disks) reliable we need replication, so there is tradeoff with capacity and performance (write amplification)
When we talk about collection of physical disks representing one single logical disk we should know that there would be small compute and some non-volatile RAM also included to fully complete the disk controller component. This RAM is also used for WAL for faster writes similar to #Database
In a way this set of disks also have challenges similar to distributes databases.&lt;/p></description></item></channel></rss>