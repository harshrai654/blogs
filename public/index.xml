<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Learning Loop</title>
    <link>http://localhost:1313/blogs/</link>
    <description>Recent content on Learning Loop</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Mar 2025 20:41:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Inodes and Disk Layout</title>
      <link>http://localhost:1313/blogs/file-system-implementation/</link>
      <pubDate>Sat, 01 Mar 2025 20:41:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/file-system-implementation/</guid>
      <description>&lt;h2 id=&#34;overall-organization-of-data-in-disks&#34;&gt;Overall Organization Of Data In Disks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Assuming we have a 256KB disk&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Disk Blocks&lt;/strong&gt;: The basic units of storage on the disk, &lt;em&gt;each 4 KB in size.&lt;/em&gt; The disk is divided into these blocks, numbered from 0 to N-1 (where N is the total number of blocks).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inode Bitmap (i)&lt;/strong&gt;: Block 1; a bitmap tracking which inodes are free (0) or in-use (1).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Bitmap (d)&lt;/strong&gt;: Block 2; a bitmap tracking which data blocks are free (0) or allocated (1).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inode Table (I)&lt;/strong&gt;: Blocks 3-7; an array of inodes, where each inode (256 bytes) holds metadata about a file, like size, permissions, and pointers to data blocks.
5 blocks of 4KB will contain 80 256 byte inode strutures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Region (D)&lt;/strong&gt;: Blocks 8-63; the largest section, storing the actual contents of files and directories.
&lt;img alt=&#34;Pasted image 20250301204506.png&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/blogs/media/pasted-image-20250301204506.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inode&#34;&gt;Inode&lt;/h2&gt;
&lt;p&gt;Every inode has a unique identifier called an &lt;strong&gt;inode number&lt;/strong&gt; (or &lt;strong&gt;i-number&lt;/strong&gt;). This number acts like a file’s address in the file system, allowing the operating system to quickly locate its inode. For example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Files And Directories</title>
      <link>http://localhost:1313/blogs/files-and-directories/</link>
      <pubDate>Sun, 23 Feb 2025 20:41:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/files-and-directories/</guid>
      <description>&lt;h1 id=&#34;files-and-directories&#34;&gt;Files and directories&lt;/h1&gt;
&lt;p&gt;File systems virtualize persistent storage (e.g., hard drives, SSDs) into user-friendly files and directories, adding a third pillar to OS abstractions (processes for CPU, address spaces for memory).&lt;/p&gt;
&lt;h2 id=&#34;file-paths-and-system-calls&#34;&gt;File Paths and System Calls&lt;/h2&gt;
&lt;p&gt;Files are organized in a &lt;strong&gt;tree-like directory structure&lt;/strong&gt;, starting from the root (/). A file’s location is identified by its &lt;strong&gt;pathname&lt;/strong&gt; (e.g., /home/user/file.txt). To interact with files, processes use &lt;strong&gt;system calls&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;open(path, flags)&lt;/strong&gt;: Opens a file and returns a &lt;strong&gt;file descriptor&lt;/strong&gt; (fd).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;read(fd, buffer, size)&lt;/strong&gt;: Reads data from the file into a buffer using the fd.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;write(fd, buffer, size)&lt;/strong&gt;: Writes data to the file via the fd.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;close(fd)&lt;/strong&gt;: Closes the file, freeing the fd.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;file-descriptors&#34;&gt;File Descriptors&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;file descriptor&lt;/strong&gt; is a small integer, unique to each process, that identifies an open file. When a process calls open(), the operating system assigns it the next available fd (e.g., 3, 4, etc.). Every process starts with three default fds:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket File Descriptor and TCP connections</title>
      <link>http://localhost:1313/blogs/socket-file-descriptor-and-tcp-connections-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/socket-file-descriptor-and-tcp-connections-1/</guid>
      <description>&lt;h3 id=&#34;socket-file-descriptors-and-their-kernel-structures&#34;&gt;Socket File Descriptors and Their Kernel Structures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;socket&lt;/strong&gt; is a special type of file descriptor (FD) in Linux, represented as &lt;code&gt;socket:[inode]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Unlike regular file FDs, socket FDs point to &lt;strong&gt;in-memory kernel structures&lt;/strong&gt;, not disk inodes.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/fd&lt;/code&gt; directory lists all FDs for a process, including sockets.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;inode number&lt;/strong&gt; of a socket can be used to inspect its details via tools like &lt;code&gt;ss&lt;/code&gt; and &lt;code&gt;/proc/net/tcp&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;example-checking-open-fds-for-process-216&#34;&gt;Example: Checking Open FDs for Process &lt;code&gt;216&lt;/code&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ls -l /proc/216/fd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
