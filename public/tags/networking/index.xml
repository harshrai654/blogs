<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Networking on Learning Loop</title>
    <link>http://localhost:1313/blogs/tags/networking/</link>
    <description>Recent content in Networking on Learning Loop</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Apr 2025 14:21:54 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/blogs/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debugging Redis Latency</title>
      <link>http://localhost:1313/blogs/debugging-redis-latency/</link>
      <pubDate>Sun, 06 Apr 2025 14:21:54 +0530</pubDate>
      <guid>http://localhost:1313/blogs/debugging-redis-latency/</guid>
      <description>&lt;p&gt;This article is about how at work we solved the issue of high response time while executing Redis commands from Node.js server to a Redis compatible database known as dragonfly.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;After introducing metrics to our Node.js service, we started recording the overall response time whenever a Redis command was executed. We had a wrapper service around a Redis driver known as &lt;code&gt;ioredis&lt;/code&gt; for interacting with our Redis-compatible database.
Once we set up Grafana dashboards for metrics like cache latency, we saw unusually high p99 latency numbers, close to 200ms. This is a very large number, especially considering the underlying database query itself typically takes less than 10ms to complete. To understand &lt;em&gt;why&lt;/em&gt; this latency was so high, we needed more detailed insight than metrics alone could provide. As part of a broader effort to set up our observability stack, I had been exploring various tracing solutions â€“ options ranged from open-source SDKs (&lt;a href=&#34;https://opentelemetry.io/docs/languages/js/&#34;&gt;OpenTelemetry Node.js SDK&lt;/a&gt;) with a self-deployed trace backend, to third-party managed solutions (Datadog, Middleware, etc.). For this investigation, we decided to proceed with a self-hosted &lt;a href=&#34;https://grafana.com/oss/tempo/&#34;&gt;Grafana Tempo&lt;/a&gt; instance to test the setup and feasibility. (So far, the setup is working great, and I&amp;rsquo;m planning a detailed blog post on our observability architecture soon). With tracing set up, we could get a waterfall view of the path taken by the service while responding to things like HTTP requests or event processing, which we hoped would pinpoint the source of the delay in our Redis command execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket File Descriptor and TCP connections</title>
      <link>http://localhost:1313/blogs/socket-file-descriptor-and-tcp-connections/</link>
      <pubDate>Sun, 02 Mar 2025 16:15:01 +0530</pubDate>
      <guid>http://localhost:1313/blogs/socket-file-descriptor-and-tcp-connections/</guid>
      <description>&lt;h2 id=&#34;socket-file-descriptors-and-their-kernel-structures&#34;&gt;Socket File Descriptors and Their Kernel Structures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;socket&lt;/strong&gt; is a special type of file descriptor (FD) in Linux, represented as &lt;code&gt;socket:[inode]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Unlike regular file FDs, socket FDs point to &lt;strong&gt;in-memory kernel structures&lt;/strong&gt;, not disk inodes.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/fd&lt;/code&gt; directory lists all FDs for a process, including sockets.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;inode number&lt;/strong&gt; of a socket can be used to inspect its details via tools like &lt;code&gt;ss&lt;/code&gt; and &lt;code&gt;/proc/net/tcp&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;example-checking-open-fds-for-process-216&#34;&gt;Example: Checking Open FDs for Process &lt;code&gt;216&lt;/code&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ls -l /proc/216/fd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
